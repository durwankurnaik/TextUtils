{"version":3,"sources":["components/Navbar.js","components/TextFrom.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","tmode","to","type","id","onClick","toggleMode","role","htmlFor","TextFrom","useState","text","setText","value","onChange","event","console","log","target","placeholder","temxt","rows","toUpperCase","toLowerCase","length","split","About","backgroundColor","color","borderRadius","border","myStyle","setMyStyle","btnText","setBtnText","style","App","setMode","setTmode","document","body","coloe","modeStatus","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.da9d6ef3.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\n\nconst Navbar = (props) => {\n  return (\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} text-${props.tmode}`}>\n      <div className=\"container-fluid\">\n        <Link className=\"navbar-brand\" to=\"/\">Navbar</Link>\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/\">Home</Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/about\">About</Link>\n            </li>\n          </ul>\n          <form className=\"d-flex\">\n            <div className=\"form-check form-switch\">\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" />\n              <label className=\"form-check-label\" htmlFor=\"modeSwitcher\">Enable {props.tmode} mode</label>\n            </div>\n          </form>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Navbar\n","import React, { useState } from 'react'\n\nexport default function TextFrom(props) {\n  const [text, setText] = useState(\"\");\n\n  const handleOnChange = (event) => {\n    console.log(\"On Change function\");\n    setText(event.target.value);\n  }\n\n  const handleUpClick = (event) => {\n    setText(text.toUpperCase());\n  }\n\n  const handleLoClick = () => {\n    setText(text.toLowerCase());\n  }\n\n  const handleClearText = () => {\n    setText('');\n  }\n\n  return (\n    <div>\n      <div className=\"container mt-4\"> \n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} placeholder={props.temxt} rows=\"12\" id=\"textInp\"></textarea>\n        <button onClick={handleUpClick} className=\"btn btn-primary mt-3\">To Uppercase</button>\n        <button onClick={handleLoClick} className=\"btn btn-primary mt-3 mx-2\">To Lowercase</button>\n        <button onClick={handleClearText} className=\"btn btn-primary mt-3\">Clear Text</button>\n      </div>\n      <div className={`container mt-3 text-${props.tmode}`}>\n        <h1>Summary of your entered text</h1>\n        <p>{text.length > 0 ? text.split(/\\s+/).length: 0} words and {text.length} characters</p>\n      </div>\n      <div className={`container mt-4 text-${props.tmode}`}>\n        <h2>Preview of your text</h2>\n        <p>{text.length > 0 ? text: \"Enter your text above to see the preview in here\"}</p>\n      </div>\n    </div>\n  )\n}\n","import React, {useState} from 'react'\n\nexport default function About() {\n\n  const [myStyle, setMyStyle] = useState({\n    backgroundColor: 'white',\n    color: 'black',\n    borderRadius: '10px',\n    border: '1px solid black',\n  });\n\n  const [btnText, setBtnText] = useState('Dark Mode');\n\n  let toggleStyle = () => {\n    \n    if (myStyle.color === 'white') {\n      setMyStyle({\n        backgroundColor: 'white',\n        color: 'black',\n        borderRadius: '10px',\n        border: '1px solid black',\n      })\n      setBtnText('Dark Mode');\n    } else {\n      setMyStyle({\n        backgroundColor: 'black',\n        color: 'white',\n        borderRadius: '10px',\n        border: '1px solid white',\n      })\n      setBtnText('Light Mode');\n    }\n  }\n\n  return (\n    <div className=\"container\" style={myStyle}>\n      <h2 className=\"mb-4 my-1 mt-4\">About Us</h2>\n      <div className=\"accordion\" id=\"accordionExample\">\n        <div className=\"accordion-item\" style={myStyle}>\n          <h2 className=\"accordion-header\" id=\"headingOne\">\n            <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n              Accordion Item #1\n            </button>\n          </h2>\n          <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n            <div className=\"accordion-body\">\n              <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\" style={myStyle}>\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\n            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n              Accordion Item #2\n            </button>\n          </h2>\n          <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n            <div className=\"accordion-body\">\n              <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\" style={myStyle}>\n          <h2 className=\"accordion-header\" id=\"headingThree\">\n            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n              Accordion Item #3\n            </button>\n          </h2>\n          <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n            <div className=\"accordion-body\">\n              <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n      </div>\n      <button onClick={toggleStyle} type=\"button\" id=\"styleSwitcher\" className=\"btn btn-primary my-3\">{btnText}</button>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextFrom from './components/TextFrom';\nimport About from './components/About';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [tmode, setTmode] = useState('dark');\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      setTmode('light');\n      document.body.style.backgroundColor = '#343a40';\n      document.body.style.coloe = 'white';\n    } else {\n      setMode('light');\n      setTmode('dark');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = '#343a40';\n    }\n  }\n\n  return (\n      <Router>\n      <Navbar mode={mode} toggleMode={toggleMode} modeStatus={mode} tmode={tmode} />\n        <Routes>\n          <Route path=\"/\" element={<TextFrom temxt=\"Enter your text here\" mode={mode} tmode={tmode} />} />\n          <Route path=\"/about\" element={<About />} />\n        </Routes>\n      </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}